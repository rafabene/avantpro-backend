// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/notification_preference_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repositories/notification_preference_repository.go -destination=internal/services/tests/mocks/notification_preference_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"

	models "github.com/rafabene/avantpro-backend/internal/models"
)

// MockNotificationPreferenceRepository is a mock of NotificationPreferenceRepository interface.
type MockNotificationPreferenceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationPreferenceRepositoryMockRecorder
	isgomock struct{}
}

// MockNotificationPreferenceRepositoryMockRecorder is the mock recorder for MockNotificationPreferenceRepository.
type MockNotificationPreferenceRepositoryMockRecorder struct {
	mock *MockNotificationPreferenceRepository
}

// NewMockNotificationPreferenceRepository creates a new mock instance.
func NewMockNotificationPreferenceRepository(ctrl *gomock.Controller) *MockNotificationPreferenceRepository {
	mock := &MockNotificationPreferenceRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationPreferenceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationPreferenceRepository) EXPECT() *MockNotificationPreferenceRepositoryMockRecorder {
	return m.recorder
}

// BulkUpdate mocks base method.
func (m *MockNotificationPreferenceRepository) BulkUpdate(organizationID uuid.UUID, preferences []models.NotificationPreferenceBulkItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdate", organizationID, preferences)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkUpdate indicates an expected call of BulkUpdate.
func (mr *MockNotificationPreferenceRepositoryMockRecorder) BulkUpdate(organizationID, preferences any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdate", reflect.TypeOf((*MockNotificationPreferenceRepository)(nil).BulkUpdate), organizationID, preferences)
}

// Create mocks base method.
func (m *MockNotificationPreferenceRepository) Create(preference *models.NotificationPreference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", preference)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNotificationPreferenceRepositoryMockRecorder) Create(preference any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationPreferenceRepository)(nil).Create), preference)
}

// CreateDefaults mocks base method.
func (m *MockNotificationPreferenceRepository) CreateDefaults(organizationID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDefaults", organizationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDefaults indicates an expected call of CreateDefaults.
func (mr *MockNotificationPreferenceRepositoryMockRecorder) CreateDefaults(organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDefaults", reflect.TypeOf((*MockNotificationPreferenceRepository)(nil).CreateDefaults), organizationID)
}

// Delete mocks base method.
func (m *MockNotificationPreferenceRepository) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNotificationPreferenceRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNotificationPreferenceRepository)(nil).Delete), id)
}

// DeleteByOrganizationID mocks base method.
func (m *MockNotificationPreferenceRepository) DeleteByOrganizationID(organizationID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByOrganizationID", organizationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByOrganizationID indicates an expected call of DeleteByOrganizationID.
func (mr *MockNotificationPreferenceRepositoryMockRecorder) DeleteByOrganizationID(organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByOrganizationID", reflect.TypeOf((*MockNotificationPreferenceRepository)(nil).DeleteByOrganizationID), organizationID)
}

// GetByOrganizationID mocks base method.
func (m *MockNotificationPreferenceRepository) GetByOrganizationID(organizationID uuid.UUID) ([]models.NotificationPreference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrganizationID", organizationID)
	ret0, _ := ret[0].([]models.NotificationPreference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrganizationID indicates an expected call of GetByOrganizationID.
func (mr *MockNotificationPreferenceRepositoryMockRecorder) GetByOrganizationID(organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrganizationID", reflect.TypeOf((*MockNotificationPreferenceRepository)(nil).GetByOrganizationID), organizationID)
}

// GetByOrganizationIDAndEvent mocks base method.
func (m *MockNotificationPreferenceRepository) GetByOrganizationIDAndEvent(organizationID uuid.UUID, event models.NotificationEvent) (*models.NotificationPreference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrganizationIDAndEvent", organizationID, event)
	ret0, _ := ret[0].(*models.NotificationPreference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrganizationIDAndEvent indicates an expected call of GetByOrganizationIDAndEvent.
func (mr *MockNotificationPreferenceRepositoryMockRecorder) GetByOrganizationIDAndEvent(organizationID, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrganizationIDAndEvent", reflect.TypeOf((*MockNotificationPreferenceRepository)(nil).GetByOrganizationIDAndEvent), organizationID, event)
}

// GetEnabledEventsForOrganization mocks base method.
func (m *MockNotificationPreferenceRepository) GetEnabledEventsForOrganization(organizationID uuid.UUID) ([]models.NotificationEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledEventsForOrganization", organizationID)
	ret0, _ := ret[0].([]models.NotificationEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledEventsForOrganization indicates an expected call of GetEnabledEventsForOrganization.
func (mr *MockNotificationPreferenceRepositoryMockRecorder) GetEnabledEventsForOrganization(organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledEventsForOrganization", reflect.TypeOf((*MockNotificationPreferenceRepository)(nil).GetEnabledEventsForOrganization), organizationID)
}

// IsEventEnabledForOrganization mocks base method.
func (m *MockNotificationPreferenceRepository) IsEventEnabledForOrganization(organizationID uuid.UUID, event models.NotificationEvent) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEventEnabledForOrganization", organizationID, event)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEventEnabledForOrganization indicates an expected call of IsEventEnabledForOrganization.
func (mr *MockNotificationPreferenceRepositoryMockRecorder) IsEventEnabledForOrganization(organizationID, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEventEnabledForOrganization", reflect.TypeOf((*MockNotificationPreferenceRepository)(nil).IsEventEnabledForOrganization), organizationID, event)
}

// Update mocks base method.
func (m *MockNotificationPreferenceRepository) Update(preference *models.NotificationPreference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", preference)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNotificationPreferenceRepositoryMockRecorder) Update(preference any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNotificationPreferenceRepository)(nil).Update), preference)
}
