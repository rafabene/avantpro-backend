// Code generated by MockGen. DO NOT EDIT.
// Source: organization_repository.go
//
// Generated by this command:
//
//	mockgen -source=organization_repository.go -destination=../services/tests/mocks/organization_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	models "github.com/rafabene/avantpro-backend/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationRepositoryInterface is a mock of OrganizationRepositoryInterface interface.
type MockOrganizationRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockOrganizationRepositoryInterfaceMockRecorder is the mock recorder for MockOrganizationRepositoryInterface.
type MockOrganizationRepositoryInterfaceMockRecorder struct {
	mock *MockOrganizationRepositoryInterface
}

// NewMockOrganizationRepositoryInterface creates a new mock instance.
func NewMockOrganizationRepositoryInterface(ctrl *gomock.Controller) *MockOrganizationRepositoryInterface {
	mock := &MockOrganizationRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockOrganizationRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationRepositoryInterface) EXPECT() *MockOrganizationRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddMember mocks base method.
func (m *MockOrganizationRepositoryInterface) AddMember(member *models.OrganizationMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMember", member)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) AddMember(member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).AddMember), member)
}

// Create mocks base method.
func (m *MockOrganizationRepositoryInterface) Create(org *models.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", org)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) Create(org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).Create), org)
}

// CreateInvite mocks base method.
func (m *MockOrganizationRepositoryInterface) CreateInvite(invite *models.OrganizationInvite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvite", invite)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInvite indicates an expected call of CreateInvite.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) CreateInvite(invite any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvite", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).CreateInvite), invite)
}

// Delete mocks base method.
func (m *MockOrganizationRepositoryInterface) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).Delete), id)
}

// DeleteInvite mocks base method.
func (m *MockOrganizationRepositoryInterface) DeleteInvite(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvite", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvite indicates an expected call of DeleteInvite.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) DeleteInvite(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvite", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).DeleteInvite), id)
}

// ExpireInvites mocks base method.
func (m *MockOrganizationRepositoryInterface) ExpireInvites() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireInvites")
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpireInvites indicates an expected call of ExpireInvites.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) ExpireInvites() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireInvites", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).ExpireInvites))
}

// GetByCreator mocks base method.
func (m *MockOrganizationRepositoryInterface) GetByCreator(creatorID uuid.UUID, limit, offset int, sortBy, sortOrder string) ([]models.Organization, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCreator", creatorID, limit, offset, sortBy, sortOrder)
	ret0, _ := ret[0].([]models.Organization)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByCreator indicates an expected call of GetByCreator.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetByCreator(creatorID, limit, offset, sortBy, sortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCreator", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetByCreator), creatorID, limit, offset, sortBy, sortOrder)
}

// GetByID mocks base method.
func (m *MockOrganizationRepositoryInterface) GetByID(id uuid.UUID) (*models.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetByID), id)
}

// GetInviteByID mocks base method.
func (m *MockOrganizationRepositoryInterface) GetInviteByID(id uuid.UUID) (*models.OrganizationInvite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInviteByID", id)
	ret0, _ := ret[0].(*models.OrganizationInvite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInviteByID indicates an expected call of GetInviteByID.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetInviteByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInviteByID", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetInviteByID), id)
}

// GetInviteByToken mocks base method.
func (m *MockOrganizationRepositoryInterface) GetInviteByToken(token string) (*models.OrganizationInvite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInviteByToken", token)
	ret0, _ := ret[0].(*models.OrganizationInvite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInviteByToken indicates an expected call of GetInviteByToken.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetInviteByToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInviteByToken", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetInviteByToken), token)
}

// GetInvites mocks base method.
func (m *MockOrganizationRepositoryInterface) GetInvites(orgID uuid.UUID, limit, offset int, sortBy, sortOrder string) ([]models.OrganizationInvite, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvites", orgID, limit, offset, sortBy, sortOrder)
	ret0, _ := ret[0].([]models.OrganizationInvite)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInvites indicates an expected call of GetInvites.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetInvites(orgID, limit, offset, sortBy, sortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvites", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetInvites), orgID, limit, offset, sortBy, sortOrder)
}

// GetMember mocks base method.
func (m *MockOrganizationRepositoryInterface) GetMember(orgID, userID uuid.UUID) (*models.OrganizationMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember", orgID, userID)
	ret0, _ := ret[0].(*models.OrganizationMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetMember(orgID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetMember), orgID, userID)
}

// GetMembers mocks base method.
func (m *MockOrganizationRepositoryInterface) GetMembers(orgID uuid.UUID, limit, offset int, sortBy, sortOrder string) ([]models.OrganizationMember, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembers", orgID, limit, offset, sortBy, sortOrder)
	ret0, _ := ret[0].([]models.OrganizationMember)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMembers indicates an expected call of GetMembers.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetMembers(orgID, limit, offset, sortBy, sortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembers", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetMembers), orgID, limit, offset, sortBy, sortOrder)
}

// GetPendingInviteByEmail mocks base method.
func (m *MockOrganizationRepositoryInterface) GetPendingInviteByEmail(orgID uuid.UUID, email string) (*models.OrganizationInvite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingInviteByEmail", orgID, email)
	ret0, _ := ret[0].(*models.OrganizationInvite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingInviteByEmail indicates an expected call of GetPendingInviteByEmail.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetPendingInviteByEmail(orgID, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingInviteByEmail", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetPendingInviteByEmail), orgID, email)
}

// GetUserMemberships mocks base method.
func (m *MockOrganizationRepositoryInterface) GetUserMemberships(userID uuid.UUID, limit, offset int, sortBy, sortOrder string) ([]models.OrganizationMember, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMemberships", userID, limit, offset, sortBy, sortOrder)
	ret0, _ := ret[0].([]models.OrganizationMember)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserMemberships indicates an expected call of GetUserMemberships.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) GetUserMemberships(userID, limit, offset, sortBy, sortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMemberships", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).GetUserMemberships), userID, limit, offset, sortBy, sortOrder)
}

// List mocks base method.
func (m *MockOrganizationRepositoryInterface) List(limit, offset int, sortBy, sortOrder string) ([]models.Organization, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit, offset, sortBy, sortOrder)
	ret0, _ := ret[0].([]models.Organization)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) List(limit, offset, sortBy, sortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).List), limit, offset, sortBy, sortOrder)
}

// RegenerateInviteToken mocks base method.
func (m *MockOrganizationRepositoryInterface) RegenerateInviteToken(invite *models.OrganizationInvite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegenerateInviteToken", invite)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegenerateInviteToken indicates an expected call of RegenerateInviteToken.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) RegenerateInviteToken(invite any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenerateInviteToken", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).RegenerateInviteToken), invite)
}

// RemoveMember mocks base method.
func (m *MockOrganizationRepositoryInterface) RemoveMember(orgID, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", orgID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) RemoveMember(orgID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).RemoveMember), orgID, userID)
}

// Update mocks base method.
func (m *MockOrganizationRepositoryInterface) Update(org *models.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", org)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) Update(org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).Update), org)
}

// UpdateInvite mocks base method.
func (m *MockOrganizationRepositoryInterface) UpdateInvite(invite *models.OrganizationInvite) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvite", invite)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInvite indicates an expected call of UpdateInvite.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) UpdateInvite(invite any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvite", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).UpdateInvite), invite)
}

// UpdateMember mocks base method.
func (m *MockOrganizationRepositoryInterface) UpdateMember(member *models.OrganizationMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMember", member)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMember indicates an expected call of UpdateMember.
func (mr *MockOrganizationRepositoryInterfaceMockRecorder) UpdateMember(member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMember", reflect.TypeOf((*MockOrganizationRepositoryInterface)(nil).UpdateMember), member)
}
