// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/notification_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repositories/notification_repository.go -destination=internal/services/tests/mocks/notification_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"

	models "github.com/rafabene/avantpro-backend/internal/models"
)

// MockNotificationRepository is a mock of NotificationRepository interface.
type MockNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryMockRecorder
	isgomock struct{}
}

// MockNotificationRepositoryMockRecorder is the mock recorder for MockNotificationRepository.
type MockNotificationRepositoryMockRecorder struct {
	mock *MockNotificationRepository
}

// NewMockNotificationRepository creates a new mock instance.
func NewMockNotificationRepository(ctrl *gomock.Controller) *MockNotificationRepository {
	mock := &MockNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepository) EXPECT() *MockNotificationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNotificationRepository) Create(notification *models.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNotificationRepositoryMockRecorder) Create(notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationRepository)(nil).Create), notification)
}

// Delete mocks base method.
func (m *MockNotificationRepository) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNotificationRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNotificationRepository)(nil).Delete), id)
}

// DeleteByUserID mocks base method.
func (m *MockNotificationRepository) DeleteByUserID(userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserID", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserID indicates an expected call of DeleteByUserID.
func (mr *MockNotificationRepositoryMockRecorder) DeleteByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserID", reflect.TypeOf((*MockNotificationRepository)(nil).DeleteByUserID), userID)
}

// GetByID mocks base method.
func (m *MockNotificationRepository) GetByID(id uuid.UUID) (*models.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockNotificationRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockNotificationRepository)(nil).GetByID), id)
}

// GetByUserID mocks base method.
func (m *MockNotificationRepository) GetByUserID(userID uuid.UUID, organizationID *uuid.UUID, limit, offset int, sortBy, sortOrder string) ([]models.Notification, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userID, organizationID, limit, offset, sortBy, sortOrder)
	ret0, _ := ret[0].([]models.Notification)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockNotificationRepositoryMockRecorder) GetByUserID(userID, organizationID, limit, offset, sortBy, sortOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockNotificationRepository)(nil).GetByUserID), userID, organizationID, limit, offset, sortBy, sortOrder)
}

// GetUnreadByUserID mocks base method.
func (m *MockNotificationRepository) GetUnreadByUserID(userID uuid.UUID, organizationID *uuid.UUID) ([]models.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadByUserID", userID, organizationID)
	ret0, _ := ret[0].([]models.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadByUserID indicates an expected call of GetUnreadByUserID.
func (mr *MockNotificationRepositoryMockRecorder) GetUnreadByUserID(userID, organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadByUserID", reflect.TypeOf((*MockNotificationRepository)(nil).GetUnreadByUserID), userID, organizationID)
}

// GetUnreadCountByUserID mocks base method.
func (m *MockNotificationRepository) GetUnreadCountByUserID(userID uuid.UUID, organizationID *uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadCountByUserID", userID, organizationID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadCountByUserID indicates an expected call of GetUnreadCountByUserID.
func (mr *MockNotificationRepositoryMockRecorder) GetUnreadCountByUserID(userID, organizationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadCountByUserID", reflect.TypeOf((*MockNotificationRepository)(nil).GetUnreadCountByUserID), userID, organizationID)
}

// MarkAllAsRead mocks base method.
func (m *MockNotificationRepository) MarkAllAsRead(userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAllAsRead", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAllAsRead indicates an expected call of MarkAllAsRead.
func (mr *MockNotificationRepositoryMockRecorder) MarkAllAsRead(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAllAsRead", reflect.TypeOf((*MockNotificationRepository)(nil).MarkAllAsRead), userID)
}

// MarkAsRead mocks base method.
func (m *MockNotificationRepository) MarkAsRead(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsRead", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsRead indicates an expected call of MarkAsRead.
func (mr *MockNotificationRepositoryMockRecorder) MarkAsRead(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsRead", reflect.TypeOf((*MockNotificationRepository)(nil).MarkAsRead), id)
}

// Update mocks base method.
func (m *MockNotificationRepository) Update(notification *models.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockNotificationRepositoryMockRecorder) Update(notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNotificationRepository)(nil).Update), notification)
}
