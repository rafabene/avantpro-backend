// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/email_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/email_service.go -destination=internal/services/tests/mocks/email_service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	models "github.com/rafabene/avantpro-backend/internal/models"
)

// MockEmailServiceInterface is a mock of EmailServiceInterface interface.
type MockEmailServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockEmailServiceInterfaceMockRecorder is the mock recorder for MockEmailServiceInterface.
type MockEmailServiceInterfaceMockRecorder struct {
	mock *MockEmailServiceInterface
}

// NewMockEmailServiceInterface creates a new mock instance.
func NewMockEmailServiceInterface(ctrl *gomock.Controller) *MockEmailServiceInterface {
	mock := &MockEmailServiceInterface{ctrl: ctrl}
	mock.recorder = &MockEmailServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailServiceInterface) EXPECT() *MockEmailServiceInterfaceMockRecorder {
	return m.recorder
}

// SendOrganizationInvite mocks base method.
func (m *MockEmailServiceInterface) SendOrganizationInvite(invite *models.OrganizationInvite, baseURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOrganizationInvite", invite, baseURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOrganizationInvite indicates an expected call of SendOrganizationInvite.
func (mr *MockEmailServiceInterfaceMockRecorder) SendOrganizationInvite(invite, baseURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrganizationInvite", reflect.TypeOf((*MockEmailServiceInterface)(nil).SendOrganizationInvite), invite, baseURL)
}

// SendPasswordResetEmail mocks base method.
func (m *MockEmailServiceInterface) SendPasswordResetEmail(email, resetToken, baseURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPasswordResetEmail", email, resetToken, baseURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPasswordResetEmail indicates an expected call of SendPasswordResetEmail.
func (mr *MockEmailServiceInterfaceMockRecorder) SendPasswordResetEmail(email, resetToken, baseURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPasswordResetEmail", reflect.TypeOf((*MockEmailServiceInterface)(nil).SendPasswordResetEmail), email, resetToken, baseURL)
}
