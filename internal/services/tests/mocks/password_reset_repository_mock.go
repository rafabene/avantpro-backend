// Code generated by MockGen. DO NOT EDIT.
// Source: password_reset_repository.go
//
// Generated by this command:
//
//	mockgen -source=password_reset_repository.go -destination=../services/tests/mocks/password_reset_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	models "github.com/rafabene/avantpro-backend/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockPasswordResetRepository is a mock of PasswordResetRepository interface.
type MockPasswordResetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordResetRepositoryMockRecorder
	isgomock struct{}
}

// MockPasswordResetRepositoryMockRecorder is the mock recorder for MockPasswordResetRepository.
type MockPasswordResetRepositoryMockRecorder struct {
	mock *MockPasswordResetRepository
}

// NewMockPasswordResetRepository creates a new mock instance.
func NewMockPasswordResetRepository(ctrl *gomock.Controller) *MockPasswordResetRepository {
	mock := &MockPasswordResetRepository{ctrl: ctrl}
	mock.recorder = &MockPasswordResetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordResetRepository) EXPECT() *MockPasswordResetRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPasswordResetRepository) Create(token *models.PasswordResetToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPasswordResetRepositoryMockRecorder) Create(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPasswordResetRepository)(nil).Create), token)
}

// DeleteExpiredTokens mocks base method.
func (m *MockPasswordResetRepository) DeleteExpiredTokens() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredTokens")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredTokens indicates an expected call of DeleteExpiredTokens.
func (mr *MockPasswordResetRepositoryMockRecorder) DeleteExpiredTokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredTokens", reflect.TypeOf((*MockPasswordResetRepository)(nil).DeleteExpiredTokens))
}

// DeleteUserTokens mocks base method.
func (m *MockPasswordResetRepository) DeleteUserTokens(userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserTokens", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserTokens indicates an expected call of DeleteUserTokens.
func (mr *MockPasswordResetRepositoryMockRecorder) DeleteUserTokens(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserTokens", reflect.TypeOf((*MockPasswordResetRepository)(nil).DeleteUserTokens), userID)
}

// GetByToken mocks base method.
func (m *MockPasswordResetRepository) GetByToken(token string) (*models.PasswordResetToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByToken", token)
	ret0, _ := ret[0].(*models.PasswordResetToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByToken indicates an expected call of GetByToken.
func (mr *MockPasswordResetRepositoryMockRecorder) GetByToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByToken", reflect.TypeOf((*MockPasswordResetRepository)(nil).GetByToken), token)
}

// Update mocks base method.
func (m *MockPasswordResetRepository) Update(token *models.PasswordResetToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPasswordResetRepositoryMockRecorder) Update(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPasswordResetRepository)(nil).Update), token)
}
