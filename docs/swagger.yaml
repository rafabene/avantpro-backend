basePath: /api/v1
definitions:
  models.LoginRequest:
    description: User login request
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    description: Login response with token and user info
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.MessageResponse:
    description: Simple message response
    properties:
      message:
        example: Operation completed successfully
        type: string
    type: object
  models.PasswordResetConfirmRequest:
    description: Password reset confirmation request
    properties:
      new_password:
        example: newpassword123
        minLength: 6
        type: string
      token:
        example: reset-token-123
        type: string
    required:
    - new_password
    - token
    type: object
  models.PasswordResetRequest:
    description: Password reset request
    properties:
      email:
        example: user@example.com
        type: string
    required:
    - email
    type: object
  models.ProfileCreateRequest:
    description: Profile creation request
    properties:
      city:
        example: São Paulo
        maxLength: 100
        minLength: 2
        type: string
      district:
        example: Centro
        maxLength: 100
        minLength: 2
        type: string
      phone:
        example: "11987654321"
        maxLength: 15
        minLength: 10
        type: string
      street:
        example: 123 Main Street
        maxLength: 200
        minLength: 5
        type: string
      zip_code:
        example: "01234567"
        type: string
    required:
    - city
    - district
    - phone
    - street
    - zip_code
    type: object
  models.ProfileResponse:
    description: Profile response
    properties:
      city:
        example: São Paulo
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      district:
        example: Centro
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      phone:
        example: "11987654321"
        type: string
      street:
        example: 123 Main Street
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      zip_code:
        example: "01234567"
        type: string
    type: object
  models.ProfileUpdateRequest:
    description: Profile update request
    properties:
      city:
        example: São Paulo
        maxLength: 100
        minLength: 2
        type: string
      district:
        example: Centro
        maxLength: 100
        minLength: 2
        type: string
      phone:
        example: "11987654321"
        maxLength: 15
        minLength: 10
        type: string
      street:
        example: 123 Main Street
        maxLength: 200
        minLength: 5
        type: string
      zip_code:
        example: "01234567"
        type: string
    type: object
  models.RegisterRequest:
    description: User registration request
    properties:
      email:
        example: user@example.com
        type: string
      name:
        example: John Doe
        maxLength: 100
        minLength: 2
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.UserCreateRequest:
    description: User creation request
    properties:
      name:
        example: John Doe
        maxLength: 100
        minLength: 2
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      profile:
        $ref: '#/definitions/models.ProfileCreateRequest'
      username:
        example: user@example.com
        type: string
    required:
    - name
    - password
    - username
    type: object
  models.UserListResponse:
    description: User list response with pagination
    properties:
      data:
        items:
          $ref: '#/definitions/models.UserResponse'
        type: array
      limit:
        example: 50
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
    type: object
  models.UserResponse:
    description: User response
    properties:
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        example: John Doe
        type: string
      profile:
        $ref: '#/definitions/models.ProfileResponse'
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      username:
        example: user@example.com
        type: string
    type: object
  models.UserUpdateRequest:
    description: User update request
    properties:
      name:
        example: John Doe
        maxLength: 100
        minLength: 2
        type: string
      password:
        example: newpassword123
        minLength: 6
        type: string
      profile:
        $ref: '#/definitions/models.ProfileUpdateRequest'
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: User Management API with Profile support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: AvantPro Backend API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
      summary: Login user
      tags:
      - auth
  /api/v1/auth/password-reset:
    post:
      consumes:
      - application/json
      description: Send password reset email to user
      parameters:
      - description: Email for password reset
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/models.PasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
      summary: Request password reset
      tags:
      - auth
  /api/v1/auth/password-reset/confirm:
    post:
      consumes:
      - application/json
      description: Reset user password using reset token
      parameters:
      - description: Password reset data
        in: body
        name: reset
        required: true
        schema:
          $ref: '#/definitions/models.PasswordResetConfirmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
      summary: Reset password
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "409":
          description: Conflict
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
      summary: Register new user
      tags:
      - auth
  /api/v1/users:
    get:
      description: Get a paginated list of users with optional sorting
      parameters:
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 50
        description: Number of items per page
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: createdAt
        description: Field to sort by
        enum:
        - name
        - username
        - createdAt
        - updatedAt
        in: query
        name: sortBy
        type: string
      - default: desc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: sortOrder
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserListResponse'
        "500":
          description: Internal Server Error
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
      summary: List users with pagination and sorting
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with optional profile information
      parameters:
      - description: User creation data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "409":
          description: Conflict
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
      summary: Create a new user
      tags:
      - users
  /api/v1/users/{id}:
    delete:
      description: Delete a user by their unique identifier
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
      summary: Delete user
      tags:
      - users
    get:
      description: Get a single user by their unique identifier
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user's information
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
      summary: Update user
      tags:
      - users
  /api/v1/users/username/{username}:
    get:
      description: Get a single user by their username (email)
      parameters:
      - description: User username (email)
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
      summary: Get user by username
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
