basePath: /api/v1
definitions:
  errors.ProblemDetail:
    description: Error response following RFC 7807 Problem Details for HTTP APIs
    properties:
      detail:
        example: Invalid input data
        type: string
      instance:
        example: /api/v1/users
        type: string
      status:
        example: 400
        type: integer
      title:
        example: Validation Error
        type: string
      type:
        example: https://avantpro-backend.com/errors/validation
        type: string
    type: object
  models.InviteStatus:
    enum:
    - pending
    - accepted
    - expired
    - revoked
    type: string
    x-enum-varnames:
    - InviteStatusPending
    - InviteStatusAccepted
    - InviteStatusExpired
    - InviteStatusRevoked
  models.LoginRequest:
    description: User login request
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    description: Login response with token and user info
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.MessageResponse:
    description: Simple message response
    properties:
      message:
        example: Operation completed successfully
        type: string
    type: object
  models.NotificationEvent:
    enum:
    - member_joined
    - member_left
    - member_role_changed
    - invitation_sent
    - invitation_accepted
    - invitation_expired
    - organization_update
    type: string
    x-enum-varnames:
    - NotificationEventMemberJoined
    - NotificationEventMemberLeft
    - NotificationEventMemberRoleChanged
    - NotificationEventInvitationSent
    - NotificationEventInvitationAccepted
    - NotificationEventInvitationExpired
    - NotificationEventOrganizationUpdate
  models.NotificationPreferenceBulkItem:
    description: Single notification preference item for bulk update
    properties:
      enabled:
        example: true
        type: boolean
      event:
        allOf:
        - $ref: '#/definitions/models.NotificationEvent'
        example: member_joined
    required:
    - event
    type: object
  models.NotificationPreferenceBulkUpdateRequest:
    description: Bulk update notification preferences request
    properties:
      preferences:
        items:
          $ref: '#/definitions/models.NotificationPreferenceBulkItem'
        minItems: 1
        type: array
    required:
    - preferences
    type: object
  models.NotificationPreferenceUpdateRequest:
    description: Update notification preferences request
    properties:
      enabled:
        example: true
        type: boolean
    type: object
  models.NotificationType:
    enum:
    - info
    - success
    - warning
    - error
    type: string
    x-enum-varnames:
    - NotificationTypeInfo
    - NotificationTypeSuccess
    - NotificationTypeWarning
    - NotificationTypeError
  models.OrganizationCreateRequest:
    description: Organization creation request
    properties:
      description:
        example: A great company
        maxLength: 500
        type: string
      name:
        example: My Company
        maxLength: 100
        minLength: 2
        type: string
    required:
    - name
    type: object
  models.OrganizationInviteListResponse:
    description: Organization invitation list response with pagination
    properties:
      data:
        items:
          $ref: '#/definitions/models.OrganizationInviteResponse'
        type: array
      limit:
        example: 50
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
    type: object
  models.OrganizationInviteRequest:
    description: Organization invitation request
    properties:
      email:
        example: user@example.com
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.OrganizationRole'
        enum:
        - admin
        - user
        example: user
    required:
    - email
    - role
    type: object
  models.OrganizationInviteResponse:
    description: Organization invitation response
    properties:
      accepted_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      expires_at:
        example: "2023-12-31T23:59:59Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      invited_by:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      inviter:
        $ref: '#/definitions/models.UserResponse'
      organization:
        $ref: '#/definitions/models.OrganizationResponse'
      organization_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.OrganizationRole'
        example: user
      status:
        allOf:
        - $ref: '#/definitions/models.InviteStatus'
        example: pending
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  models.OrganizationListResponse:
    description: Organization list response with pagination
    properties:
      data:
        items:
          $ref: '#/definitions/models.OrganizationResponse'
        type: array
      limit:
        example: 50
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
    type: object
  models.OrganizationMemberListResponse:
    description: Organization member list response with pagination
    properties:
      data:
        items:
          $ref: '#/definitions/models.OrganizationMemberResponse'
        type: array
      limit:
        example: 50
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
    type: object
  models.OrganizationMemberResponse:
    description: Organization member response
    properties:
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      joined_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      organization:
        $ref: '#/definitions/models.OrganizationResponse'
      organization_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.OrganizationRole'
        example: user
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
    type: object
  models.OrganizationMemberUpdateRequest:
    description: Organization member update request
    properties:
      role:
        allOf:
        - $ref: '#/definitions/models.OrganizationRole'
        enum:
        - admin
        - user
        example: user
    required:
    - role
    type: object
  models.OrganizationResponse:
    description: Organization response
    properties:
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      created_by:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      creator:
        $ref: '#/definitions/models.UserResponse'
      description:
        example: A great company
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      invites:
        items:
          $ref: '#/definitions/models.OrganizationInviteResponse'
        type: array
      members:
        items:
          $ref: '#/definitions/models.OrganizationMemberResponse'
        type: array
      name:
        example: My Company
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
    type: object
  models.OrganizationRole:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - OrganizationRoleAdmin
    - OrganizationRoleUser
  models.OrganizationUpdateRequest:
    description: Organization update request
    properties:
      description:
        example: A great company
        maxLength: 500
        type: string
      name:
        example: My Company
        maxLength: 100
        minLength: 2
        type: string
    type: object
  models.PasswordResetConfirmRequest:
    description: Password reset confirmation request
    properties:
      new_password:
        example: newpassword123
        minLength: 6
        type: string
      token:
        example: reset-token-123
        type: string
    required:
    - new_password
    - token
    type: object
  models.PasswordResetRequest:
    description: Password reset request
    properties:
      email:
        example: user@example.com
        type: string
    required:
    - email
    type: object
  models.ProfileResponse:
    description: Profile response
    properties:
      city:
        example: SÃ£o Paulo
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      district:
        example: Centro
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
      phone:
        example: "11987654321"
        type: string
      street:
        example: 123 Main Street
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      zip_code:
        example: "01234567"
        type: string
    type: object
  models.RegisterRequest:
    description: User registration request
    properties:
      email:
        example: user@example.com
        type: string
      name:
        example: John Doe
        maxLength: 100
        minLength: 2
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.TestNotificationRequest:
    description: Test notification request
    properties:
      message:
        example: This is a test notification to verify your settings
        maxLength: 500
        minLength: 1
        type: string
      organization_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      title:
        example: Test Notification
        maxLength: 200
        minLength: 1
        type: string
      type:
        allOf:
        - $ref: '#/definitions/models.NotificationType'
        enum:
        - info
        - success
        - warning
        - error
        example: info
    required:
    - message
    - organization_id
    - title
    - type
    type: object
  models.UpdateLastSelectedOrganizationRequest:
    description: Update last selected organization request
    properties:
      organization_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
    type: object
  models.UserResponse:
    description: User response
    properties:
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      last_selected_organization_id:
        example: 550e8400-e29b-41d4-a716-446655440002
        type: string
      name:
        example: John Doe
        type: string
      profile:
        $ref: '#/definitions/models.ProfileResponse'
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      username:
        example: user@example.com
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: User Management API with Profile support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: AvantPro Backend API
  version: "1.0"
paths:
  /api/v1/auth/last-selected-organization:
    put:
      consumes:
      - application/json
      description: Update user's last selected organization preference
      parameters:
      - description: Organization preference data
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/models.UpdateLastSelectedOrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Update last selected organization
      tags:
      - auth
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
      summary: Login user
      tags:
      - auth
  /api/v1/auth/password-reset:
    post:
      consumes:
      - application/json
      description: Send password reset email to user
      parameters:
      - description: Email for password reset
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/models.PasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
      summary: Request password reset
      tags:
      - auth
  /api/v1/auth/password-reset/confirm:
    post:
      consumes:
      - application/json
      description: Reset user password using reset token
      parameters:
      - description: Password reset data
        in: body
        name: reset
        required: true
        schema:
          $ref: '#/definitions/models.PasswordResetConfirmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "404":
          description: Not Found
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
      summary: Reset password
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: Registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "409":
          description: Conflict
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            properties:
              detail:
                type: string
              instance:
                type: string
              status:
                type: integer
              title:
                type: string
              type:
                type: string
            type: object
      summary: Register new user
      tags:
      - auth
  /notification-preferences:
    get:
      consumes:
      - application/json
      description: Retrieve notification preferences for the authenticated user. Creates
        defaults if none exist.
      produces:
      - application/json
      responses:
        "200":
          description: Success response with preferences
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user notification preferences
      tags:
      - notification-preferences
    put:
      consumes:
      - application/json
      description: Bulk update notification preferences for the authenticated user
      parameters:
      - description: Bulk update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.NotificationPreferenceBulkUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success response with updated preferences
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user notification preferences
      tags:
      - notification-preferences
  /notification-preferences/{event}:
    put:
      consumes:
      - application/json
      description: Update a specific notification preference for the authenticated
        user
      parameters:
      - description: Notification event type
        in: path
        name: event
        required: true
        type: string
      - description: Update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.NotificationPreferenceUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success response with updated preference
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Preference not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update single notification preference
      tags:
      - notification-preferences
  /notification-preferences/events:
    get:
      consumes:
      - application/json
      description: Retrieve all available notification event types with descriptions
      produces:
      - application/json
      responses:
        "200":
          description: Success response with available events
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get available notification events
      tags:
      - notification-preferences
  /notification-preferences/reset:
    post:
      consumes:
      - application/json
      description: Reset all notification preferences for the authenticated user to
        default values
      produces:
      - application/json
      responses:
        "200":
          description: Success response with default preferences
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Reset preferences to defaults
      tags:
      - notification-preferences
  /notification-preferences/test:
    post:
      consumes:
      - application/json
      description: Generate a test notification for the authenticated user to verify
        settings
      parameters:
      - description: Test notification request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.TestNotificationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success response with test notification
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Generate test notification
      tags:
      - notification-preferences
  /notifications:
    delete:
      consumes:
      - application/json
      description: Delete all notifications for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete all notifications
      tags:
      - notifications
    get:
      consumes:
      - application/json
      description: Retrieve paginated list of notifications for the authenticated
        user
      parameters:
      - default: 1
        description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - default: 10
        description: 'Number of items per page (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      - default: created_at
        description: Sort by field (title, type, read, created_at, updated_at)
        in: query
        name: sortBy
        type: string
      - default: desc
        description: Sort order (asc, desc)
        in: query
        name: sortOrder
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success response with notifications and pagination
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user notifications
      tags:
      - notifications
  /notifications/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific notification for the authenticated user
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Notification not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete notification
      tags:
      - notifications
  /notifications/{id}/read:
    put:
      consumes:
      - application/json
      description: Mark a specific notification as read for the authenticated user
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Notification not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Mark notification as read
      tags:
      - notifications
  /notifications/mark-all-read:
    put:
      consumes:
      - application/json
      description: Mark all notifications as read for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Mark all notifications as read
      tags:
      - notifications
  /notifications/unread:
    get:
      consumes:
      - application/json
      description: Retrieve all unread notifications for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Success response with unread notifications
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get unread notifications
      tags:
      - notifications
  /notifications/unread-count:
    get:
      consumes:
      - application/json
      description: Retrieve the count of unread notifications for the authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: Success response with unread count
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get unread notifications count
      tags:
      - notifications
  /organizations:
    post:
      consumes:
      - application/json
      description: Create a new organization with the authenticated user as admin
      parameters:
      - description: Organization data
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/models.OrganizationCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.OrganizationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: Create a new organization
      tags:
      - organizations
  /organizations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an organization (creator only)
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: Delete organization
      tags:
      - organizations
    get:
      consumes:
      - application/json
      description: Get a specific organization by its ID
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrganizationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: Get organization by ID
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: Update an organization (admin only)
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Update data
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/models.OrganizationUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrganizationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: Update organization
      tags:
      - organizations
  /organizations/{id}/invites:
    get:
      consumes:
      - application/json
      description: Get all pending invitations for the organization (admin only)
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 50
        description: Items per page
        in: query
        name: limit
        type: integer
      - default: '"created_at"'
        description: Sort by field
        in: query
        name: sortBy
        type: string
      - default: '"desc"'
        description: Sort order (asc/desc)
        in: query
        name: sortOrder
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrganizationInviteListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: Get organization invitations
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Send an invitation to a user to join the organization (admin only)
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Invitation data
        in: body
        name: invitation
        required: true
        schema:
          $ref: '#/definitions/models.OrganizationInviteRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.OrganizationInviteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: Invite user to organization
      tags:
      - organizations
  /organizations/{id}/members:
    get:
      consumes:
      - application/json
      description: Get all members of an organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 50
        description: Items per page
        in: query
        name: limit
        type: integer
      - default: '"joined_at"'
        description: Sort by field
        in: query
        name: sortBy
        type: string
      - default: '"desc"'
        description: Sort order (asc/desc)
        in: query
        name: sortOrder
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrganizationMemberListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: Get organization members
      tags:
      - organizations
  /organizations/{id}/members/{userId}:
    delete:
      consumes:
      - application/json
      description: Remove a member from the organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: Remove member
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: Update a member's role in the organization (admin only)
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Role update data
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/models.OrganizationMemberUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrganizationMemberResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: Update member role
      tags:
      - organizations
  /organizations/invites/{inviteId}:
    delete:
      consumes:
      - application/json
      description: Revoke an invitation to join the organization (admin only)
      parameters:
      - description: Invitation ID
        in: path
        name: inviteId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: Revoke organization invitation
      tags:
      - organizations
  /organizations/invites/{inviteId}/resend:
    post:
      consumes:
      - application/json
      description: Resend an invitation with a new token and extended expiry (admin
        only)
      parameters:
      - description: Invitation ID
        in: path
        name: inviteId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrganizationInviteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: Resend organization invitation
      tags:
      - organizations
  /organizations/invites/{token}/accept:
    post:
      consumes:
      - application/json
      description: Accept an invitation to join an organization using the invitation
        token
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrganizationMemberResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: Accept organization invitation
      tags:
      - organizations
  /organizations/invites/token/{token}/validate:
    get:
      description: Validate an invitation token and check if the invited user exists
      parameters:
      - description: Invitation Token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: Validate organization invitation
      tags:
      - organizations
  /organizations/memberships:
    get:
      consumes:
      - application/json
      description: Get all organizations the authenticated user is a member of
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 50
        description: Items per page
        in: query
        name: limit
        type: integer
      - default: '"joined_at"'
        description: Sort by field
        in: query
        name: sortBy
        type: string
      - default: '"desc"'
        description: Sort order (asc/desc)
        in: query
        name: sortOrder
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrganizationMemberListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: Get user memberships
      tags:
      - organizations
  /organizations/my:
    get:
      consumes:
      - application/json
      description: Get all organizations created by the authenticated user
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 50
        description: Items per page
        in: query
        name: limit
        type: integer
      - default: '"created_at"'
        description: Sort by field
        in: query
        name: sortBy
        type: string
      - default: '"desc"'
        description: Sort order (asc/desc)
        in: query
        name: sortOrder
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrganizationListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ProblemDetail'
      summary: Get user's organizations
      tags:
      - organizations
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
